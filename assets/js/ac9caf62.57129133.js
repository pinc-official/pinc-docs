"use strict";(self.webpackChunkpinc_docs=self.webpackChunkpinc_docs||[]).push([[610],{2100:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var i=t(4848),s=t(8453);const a={id:"let-bindings",title:"Let Bindings",sidebar_position:1},l="Let Bindings",r={id:"Language Features/let-bindings",title:"Let Bindings",description:'let binds values to names. You might know them under the name "variable declarations".  Let bindings are',source:"@site/docs/Language Features/let-bindings.md",sourceDirName:"Language Features",slug:"/Language Features/let-bindings",permalink:"/pinc-docs/Language Features/let-bindings",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"let-bindings",title:"Let Bindings",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Your first Component",permalink:"/pinc-docs/your-first-component"},next:{title:"Primitive Types",permalink:"/pinc-docs/Language Features/primitive-types"}},o={},d=[{value:"Optional values",id:"optional-values",level:2},{value:"Shadowing",id:"shadowing",level:2},{value:"Blocks and Scope",id:"blocks-and-scope",level:2},{value:"Mutating Let Bindings",id:"mutating-let-bindings",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"let-bindings",children:"Let Bindings"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"let"}),' binds values to names. You might know them under the name "variable declarations". ',(0,i.jsx)("br",{})," Let bindings are\nimmutable by defualt, which means, that they can't be changed after they have been declared."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'let greeting = "hello!";\nlet amount = 10;\nlet newAmount = 10 + amount;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"optional-values",children:"Optional values"}),"\n",(0,i.jsxs)(n.p,{children:["pinc fails compiling, when you try to add a ",(0,i.jsx)(n.code,{children:"null"})," value to a let binding, which is not marked as nullable. ",(0,i.jsx)("br",{})," To\nmark a declaration as nullable, you have to end its name with a ",(0,i.jsx)(n.code,{children:"?"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'let result = 10;\nlet maybe_something? = if (result > 20) "Some value!";\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The variable ",(0,i.jsx)(n.code,{children:"maybe_something"})," has to be marked as nullable here, because we are only assigning a value to it, if the\n",(0,i.jsx)(n.code,{children:"result"})," is greater than 20."]}),"\n",(0,i.jsx)(n.h2,{id:"shadowing",children:"Shadowing"}),"\n",(0,i.jsx)(n.p,{children:'Even though let bindings cannot change their value, they may be "modified" in another way: by "shadowing" them.'}),"\n",(0,i.jsxs)(n.p,{children:["Let's assume you have a declaration named ",(0,i.jsx)(n.code,{children:"result"}),". ",(0,i.jsx)("br",{})," If you want to change the value of result, you may do the\nfollowing:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"let result = 1;\nlet result = result + 5;\n\n// result is now 6\n"})}),"\n",(0,i.jsxs)(n.p,{children:["By shadowing a variable, you are essentially redeclaring the variable with the same name. ",(0,i.jsx)("br",{})," You are however not\nchanging the value of the first declaration."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"let amount = 1;\nlet add_amount = fn (num) -> {\n    amount + num\n};\n\nlet amount = 5;\nlet result = add_amount(2);\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"result"})," will be 3, as the ",(0,i.jsx)(n.code,{children:"add_amount"})," function still only knows about the first declaration."]}),"\n",(0,i.jsx)(n.h2,{id:"blocks-and-scope",children:"Blocks and Scope"}),"\n",(0,i.jsxs)(n.p,{children:["Bindings are always scoped within their surrounding block (",(0,i.jsx)(n.code,{children:"{}"}),"). ",(0,i.jsx)("br",{})," For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"if (something == true) {\n    let result = 1;\n}\n\n// result is not accessible here\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Another feature of blocks is, that they implicitly return their last value. ",(0,i.jsx)("br",{})," So you are able to declare new\nbindings in the following way:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"let result = {\n    let part1 = 10;\n    let part2 = 20;\n\n    part1 + part2\n};\n\n// result is now 30\n// part1 and part2 are not accessible here...\n"})}),"\n",(0,i.jsx)(n.h2,{id:"mutating-let-bindings",children:"Mutating Let Bindings"}),"\n",(0,i.jsxs)(n.p,{children:["Even though let bindings are immutable by default, in some rare cases, you might need them to be mutable. ",(0,i.jsx)("br",{})," When\nthats the case, you may mark them as mutable declarations with the ",(0,i.jsx)(n.code,{children:"mutable"})," keyword."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"let mutable is_first = true;\n\nfor (i in 0..10) {\n    if (i != 0) {\n        is_first := false;\n    }\n\n    // ...\n}\n\n// is_first is now false\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["In pinc you are able to express a lot of things witout the need for mutation! ",(0,i.jsx)("br",{})," We do recommend to only use mutable\nvalues when you really need them. ",(0,i.jsx)("br",{})," Having a lot of mutable values may slow down the compiler, resulting in slower\nresponse times of your website."]})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function l(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);